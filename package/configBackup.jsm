/*global Components: false */
/*jshint -W097 */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */


"use strict";

var EXPORTED_SYMBOLS = ["EnigmailConfigBackup"];

Components.utils.import("resource://enigmail/log.jsm"); /* global EnigmailLog: false */
Components.utils.import("resource://enigmail/rules.jsm"); /* global EnigmailRules: false */
Components.utils.import("resource://enigmail/files.jsm"); /* global EnigmailFiles: false */
Components.utils.import("resource://enigmail/prefs.jsm"); /* global EnigmailPrefs: false */

const Cc = Components.classes;
const Ci = Components.interfaces;

var EnigmailConfigBackup = {
  /**
   * backup Enigmail preferences to a file
   *
   * @param outputFile  nsIFile - handle to file to be saved
   *
   * @return 0: success, other values: failure
   */
  backupPrefs: function(outputFile) {
    EnigmailLog.DEBUG("prefs.jsm: backupPrefs\n");

    // user preference
    let prefObj = {
      enigmailPrefs: EnigmailPrefs.getAllPrefs()
    };

    // per-recipient rules (aka pgpRules.xml)
    var rulesFile = EnigmailRules.getRulesFile();
    if (rulesFile.exists()) {
      prefObj.rules = EnigmailFiles.readFile(rulesFile);
    }

    // serialize everything to UTF-8 encoded JSON.
    var strm = Cc["@mozilla.org/network/file-output-stream;1"].createInstance(Ci.nsIFileOutputStream);
    var nativeJSON = Cc["@mozilla.org/dom/json;1"].createInstance(Ci.nsIJSON);

    try {
      strm.init(outputFile, -1, -1, 0);
      nativeJSON.encodeToStream(strm, "UTF-8", false, prefObj);
      strm.close();
    }
    catch (ex) {
      return -1;
    }

    return 0;
  },

  /**
   * Restore Enigmail preferences from a file as generated by backpPrefs()
   *
   * @param inputFile  nsIFile - handle to file to be saved
   *
   * @return 0: success, other values: failure
   */
  restorePrefs: function(inputFile) {
    EnigmailLog.DEBUG("prefs.jsm: restorePrefs\n");

    // Profile must be a single UTF-8 encoded JSON object.
    var strm = Cc["@mozilla.org/network/file-input-stream;1"].createInstance(Ci.nsIFileInputStream);
    var nativeJSON = Cc["@mozilla.org/dom/json;1"].createInstance(Ci.nsIJSON);

    try {
      strm.init(inputFile, -1, -1, 0);
      var prefObj = nativeJSON.decodeFromStream(strm, "UTF-8", false);
      strm.close();

      var nsIPB = Ci.nsIPrefBranch;
      var branch = EnigmailPrefs.getPrefBranch();

      // Set all options recorded in the JSON file.
      for (let name in prefObj.enigmailPrefs) {
        EnigmailPrefs.setPref(name, prefObj.enigmailPrefs[name]);
      }

      if ("rules" in prefObj) {
        EnigmailRules.loadRulesFromString(prefObj.rules);
        EnigmailRules.saveRulesFile();
      }

    }
    catch (ex) {
      EnigmailLog.ERROR("prefs.jsm: restorePrefs - exception " + ex.toString() + "\n");

      return -1;
    }

    return 0;
  }

};
